static const gchar *kernel_color_header =
"/* This is almost a copy-paste from babl/base conversion functions in RGBA space */       \n"
"                                                                                          \n"
"/* Alpha threshold used in the reference implementation for                               \n"
" * un-pre-multiplication of color data:                                                   \n"
" *                                                                                        \n"
" * 0.01 / (2^16 - 1)                                                                      \n"
" */                                                                                       \n"
"#define BABL_ALPHA_THRESHOLD 0.000000152590219                                            \n"
"                                                                                          \n"
"float linear_to_gamma_2_2 (float value)                                                   \n"
"{                                                                                         \n"
"  if (value > 0.0030402477f)                                                              \n"
"    return 1.055f * native_powr (value, (1.0f/2.4f)) - 0.055f;                            \n"
"  return 12.92f * value;                                                                  \n"
"}                                                                                         \n"
"                                                                                          \n"
"float gamma_2_2_to_linear (float value)                                                   \n"
"{                                                                                         \n"
"  if (value > 0.03928f)                                                                   \n"
"    return native_powr ((value + 0.055f) / 1.055f, 2.4f);                                 \n"
"  return value / 12.92f;                                                                  \n"
"}                                                                                         \n"
"                                                                                          \n"
"                                                                                          \n"
" /* RGBA float -> RaGaBaA float */                                                        \n"
"float4 non_premultiplied_to_premultiplied (float4 in_v)                                   \n"
"{                                                                                         \n"
"  float4 out_v;                                                                           \n"
"  out_v   = in_v * in_v.w;                                                                \n"
"  out_v.w = in_v.w;                                                                       \n"
"  return out_v;                                                                           \n"
"}                                                                                         \n"
"                                                                                          \n"
"  /* RaGaBaA float -> RGBA float */                                                       \n"
"float4 premultiplied_to_non_premultiplied (float4 in_v)                                   \n"
"{                                                                                         \n"
"  float4 out_v = (in_v.w > BABL_ALPHA_THRESHOLD)? in_v / in_v.w : (float4)(0.0f);         \n"
"  out_v.w = in_v.w;                                                                       \n"
"  return out_v;                                                                           \n"
"}                                                                                         \n"
"                                                                                          \n"
"  /* RGBA float -> R'G'B'A float */                                                       \n"
"float4 rgba2rgba_gamma_2_2 (float4 in_v)                                                  \n"
"{                                                                                         \n"
"  float4 out_v;                                                                           \n"
"  out_v = (float4)(linear_to_gamma_2_2(in_v.x),                                           \n"
"                   linear_to_gamma_2_2(in_v.y),                                           \n"
"                   linear_to_gamma_2_2(in_v.z),                                           \n"
"                   in_v.w);                                                               \n"
"  return out_v;                                                                           \n"
"}                                                                                         \n"
"                                                                                          \n"
"  /* R'G'B'A float -> RGBA float */                                                       \n"
"float4 rgba_gamma_2_22rgba (float4 in_v)                                                  \n"
"{                                                                                         \n"
"  float4 out_v;                                                                           \n"
"  out_v = (float4)(gamma_2_2_to_linear(in_v.x),                                           \n"
"                   gamma_2_2_to_linear(in_v.y),                                           \n"
"                   gamma_2_2_to_linear(in_v.z),                                           \n"
"                   in_v.w);                                                               \n"
" return out_v;                                                                            \n"
"}                                                                                         \n"
"                                                                                          \n"
"  /* RGBA float -> R'aG'aB'aA float */                                                    \n"
"float4 rgba2rgba_gamma_2_2_premultiplied (float4 in_v)                                    \n"
"{                                                                                         \n"
"  float4 out_v;                                                                           \n"
"  out_v = (float4)(linear_to_gamma_2_2(in_v.x) * in_v.w,                                  \n"
"                   linear_to_gamma_2_2(in_v.y) * in_v.w,                                  \n"
"                   linear_to_gamma_2_2(in_v.z) * in_v.w,                                  \n"
"                   in_v.w);                                                               \n"
" return out_v;                                                                            \n"
"}                                                                                         \n"
"                                                                                          \n"
"  /* R'aG'aB'aA float -> RGBA float */                                                    \n"
"float4 rgba_gamma_2_2_premultiplied2rgba (float4 in_v)                                    \n"
"{                                                                                         \n"
"  float4 out_v;                                                                           \n"
"  out_v = (in_v.w > BABL_ALPHA_THRESHOLD)? (float4)(linear_to_gamma_2_2(in_v.x) / in_v.w, \n"
"                                                    linear_to_gamma_2_2(in_v.y) / in_v.w, \n"
"                                                    linear_to_gamma_2_2(in_v.z) / in_v.w, \n"
"                                                    in_v.w) :                             \n"
"                                           (float4)(0.0f);                                \n"
"  return out_v;                                                                           \n"
"}                                                                                         \n";

static const gchar *kernel_color_conv_in =
"if      (CONV_IN_1 == 0)                            \n"
"  in_v = premultiplied_to_non_premultiplied (in_v); \n"
"else if (CONV_IN_1 == 1)                            \n"
"  in_v = premultiplied_to_non_premultiplied (in_v); \n"
"else if (CONV_IN_1 == 2)                            \n"
"  in_v = rgba2rgba_gamma_2_2 (in_v);                \n"
"else if (CONV_IN_1 == 3)                            \n"
"  in_v = rgba_gamma_2_22rgba (in_v);                \n"
"else if (CONV_IN_1 == 4)                            \n"
"  in_v = rgba2rgba_gamma_2_2_premultiplied (in_v);  \n"
"else if (CONV_IN_1 == 5)                            \n"
"  in_v = rgba_gamma_2_2_premultiplied2rgba (in_v);  \n"
"                                                    \n"
"if      (CONV_IN_2 == 0)                            \n"
"  in_v = premultiplied_to_non_premultiplied (in_v); \n"
"else if (CONV_IN_2 == 1)                            \n"
"  in_v = premultiplied_to_non_premultiplied (in_v); \n"
"else if (CONV_IN_2 == 2)                            \n"
"  in_v = rgba2rgba_gamma_2_2 (in_v);                \n"
"else if (CONV_IN_2 == 3)                            \n"
"  in_v = rgba_gamma_2_22rgba (in_v);                \n"
"else if (CONV_IN_2 == 4)                            \n"
"  in_v = rgba2rgba_gamma_2_2_premultiplied (in_v);  \n"
"else if (CONV_IN_2 == 5)                            \n"
"  in_v = rgba_gamma_2_2_premultiplied2rgba (in_v);  \n"
"                                                    \n";

static const gchar *kernel_color_conv_out =
"if      (CONV_OUT_1 == 0)                             \n"
"  out_v = premultiplied_to_non_premultiplied (out_v); \n"
"else if (CONV_OUT_1 == 1)                             \n"
"  out_v = premultiplied_to_non_premultiplied (out_v); \n"
"else if (CONV_OUT_1 == 2)                             \n"
"  out_v = rgba2rgba_gamma_2_2 (out_v);                \n"
"else if (CONV_OUT_1 == 3)                             \n"
"  out_v = rgba_gamma_2_22rgba (out_v);                \n"
"else if (CONV_OUT_1 == 4)                             \n"
"  out_v = rgba2rgba_gamma_2_2_premultiplied (out_v);  \n"
"else if (CONV_OUT_1 == 5)                             \n"
"  out_v = rgba_gamma_2_2_premultiplied2rgba (out_v);  \n"
"                                                      \n"
"if      (CONV_OUT_2 == 0)                             \n"
"  out_v = premultiplied_to_non_premultiplied (out_v); \n"
"else if (CONV_OUT_2 == 1)                             \n"
"  out_v = premultiplied_to_non_premultiplied (out_v); \n"
"else if (CONV_OUT_2 == 2)                             \n"
"  out_v = rgba2rgba_gamma_2_2 (out_v);                \n"
"else if (CONV_OUT_2 == 3)                             \n"
"  out_v = rgba_gamma_2_22rgba (out_v);                \n"
"else if (CONV_OUT_2 == 4)                             \n"
"  out_v = rgba2rgba_gamma_2_2_premultiplied (out_v);  \n"
"else if (CONV_OUT_2 == 5)                             \n"
"  out_v = rgba_gamma_2_2_premultiplied2rgba (out_v);  \n"
"                                                      \n";
